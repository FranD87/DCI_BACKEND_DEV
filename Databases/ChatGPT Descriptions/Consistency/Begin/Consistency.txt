CONSISTENCY:

NOTES:

1. BEGIN:
   - The BEGIN statement marks the start of a transaction in SQL.
   - It is used to group a set of SQL statements into a single unit of work that can be treated atomically (either all
     the statements are executed, or none of them are).
   - It sets the beginning of a transaction block and allows for data modifications and other transaction-related
     operations.

2. UPDATE:
   - The UPDATE statement is used to modify existing data in a table.
   - It allows you to change the values of one or more columns in one or more rows based on specified conditions.
   - It is typically used in conjunction with a WHERE clause to specify which rows should be updated.

3. SAVEPOINT:
   - A SAVEPOINT is a named marker within a transaction that allows you to roll back a transaction to a specific point.
   - It creates a point in the transaction where you can later issue a ROLLBACK TO statement to undo all changes made
     after that savepoint.
   - It is useful when you want to undo a portion of a transaction while keeping the changes made before the savepoint.

4. LOCK TABLE:
   - The LOCK TABLE statement is used to explicitly lock a table or tables in a database.
   - It prevents other transactions or processes from modifying or accessing the locked table(s) until the lock is
     released.
   - It is typically used to ensure data integrity and prevent concurrent modifications that could result in conflicts
     or inconsistencies.

5. SLEEP:
   - The SLEEP function (e.g., pg_sleep) is a utility function available in some database systems (e.g., PostgreSQL).
   - It causes the current session to sleep or pause for a specified amount of time.
   - It is often used for testing purposes, simulating delays, or introducing wait times between SQL statements or
     transactions.

6. COMMIT:
   - The COMMIT statement is used to permanently save the changes made within a transaction to the database.
   - It ends the current transaction and makes all the modifications made within the transaction permanent.
   - Once committed, the changes become visible to other transactions and are durable even if there are system failures.

CODE EXAMPLE:

1. Create Table:
   ```
   CREATE TABLE account (
     id SERIAL PRIMARY KEY,
     name VARCHAR(255) NOT NULL,
     balance INT NOT NULL
   );
   ```
   This statement creates a table named "account" with three columns: "id" (an automatically incrementing serial
   primary key), "name" (a non-null varchar field with a maximum length of 255 characters), and "balance"
   (a non-null integer field).

2. Insert Data:
   ```
   INSERT INTO account (name, balance) VALUES ('Julia', 50000), ('Marcus', 55000), ('Pablo', 70000);
   ```
   This statement inserts three rows of data into the "account" table. Each row contains a name and a balance value.

3. Begin Transaction, Update, and Savepoint:
   ```
   BEGIN;
   UPDATE account SET balance = balance - 100 WHERE name='Julia';
   SAVEPOINT julia_updated;
   UPDATE account SET balance = balance + 100 WHERE name='Pablo';
   ROLLBACK TO julia_updated;
   COMMIT;
   ```
   This set of statements starts a transaction, updates the balance of the account named 'Julia' by subtracting 100,
   creates a savepoint called "julia_updated," updates the balance of the account named 'Pablo' by adding 100, rolls
   back to the savepoint (undoing the 'Pablo' update), and finally commits the changes made in the transaction.

4. Begin Transaction, Lock Table, Sleep, and Commit:
   ```
   BEGIN;
   LOCK TABLE account;
   SELECT pg_sleep(10);
   COMMIT;
   ```
   These statements begin a new transaction, lock the "account" table (preventing other processes from modifying it),
   introduce a delay of 10 seconds using the `pg_sleep` function, and then commit the transaction.

5. Begin Transaction, Lock Table, Sleep, and Select:
   ```
   BEGIN;
   LOCK TABLE account;
   SELECT pg_sleep(10);
   SELECT * FROM account; -> in another terminal
   ```
   These statements start a new transaction, lock the "account" table, introduce a delay of 10 seconds using the
   `pg_sleep` function, and then perform a SELECT query to retrieve all rows from the "account" table. It suggests
   running this query in another terminal, indicating that no execution will occur until the database is committed.




